//快速幂 -- 为矩阵快速幂算法做铺垫
#include <bits/stdc++.h>
using namespace std;
int main()
{
    int a,b;//求a的b次幂
    cin >> a >> b;
    //第一种方法:原始迭代
    int res = 1;
    int bb = b;//防止b自减,保护b数据
    while(bb--)//循环b次
        res*=a;
    cout << res << endl;
    //第二种方法:调用库函数
    cout << pow(a,b) << endl;//库函数在math.h
    //第三种方法:快速幂
    res = 1;
    //假设a是3,b是11,b在计算机中存储为1011
    //a^b便是3^11
    //可以用二进制化为3^(1* 2^0 + 1* 2^1 + 0* 2^2 + 1* 2^3)
    //继续化简为 3^(1* 2^0 ) * 3^(1 * 2^1) * 3^(0 * 2^2) * 3^(1 * 2^3)
    while(b)
    {
        if(b&1)//让末位数和1做和运算,目的是判断末尾数字是否为1,很优雅的代码
                //第一轮提取出最后一个位，开始是1
                //第二轮提取出新的最后一个位，是1
            res*=a;//3^(1* 2^0) //3^(1* 2^1)
        //去掉尾数
        b >>= 1;//把末位数去掉
        //每次要相乘的数都是前一个数的2倍
        a*=a;//开始是3^1,然后是3^2,每次都是前一次的平方倍
    }
    cout << res << endl;
}